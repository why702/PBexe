/**
 * Copyright (c) 2017, Precise Biometrics AB
 * All rights reserved.
 *
 */

#ifndef PB_PAD_H
#define PB_PAD_H

#include <stdint.h>

#include "pb_types.h"
#include "pb_errors.h"
#include "pb_image.h"
#include "pb_image_t.h"
#include "pb_verifier_defs.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Note! Presentation Attack Detection (PAD) with liveness score calculations
 * requires a model trained for a specific fingerprint sensor and
 * configuration. Model implementations are generated by Precise Biometrics
 * in cooperation with the sensor vendor and/or system integrator.
 * There are no generic models provided in a standard BMM/BME deliverable.
 * Performance metrics for eight common operating points (FRR thresholds)
 * including the error rate are reported in the header file for every trained
 * model. For each of the operating points the FAR, FRR, liveness score 
 * threshold and 95% confidence interval are displayed. Also, the operating 
 * points which provide highest throughput, most security and the equal error 
 * rate are noted as in the example metrics table below:
 *
 *     FRR(%) FAR(%) THRESHOLD CONFIDENCE INTERVAL
 *     0.50   13.10  332.17    1.22 (Highest Throughput)
 *     1.00    8.17  383.67    0.49
 *     2.00    4.62  447.13    0.23
 *     2.95    2.95  490.17    0.07 (EER)
 *     3.00    2.90  490.50    0.19
 *     4.00    2.30  518.13    0.14
 *     5.00    1.89  540.57    0.12
 *     10.00   0.90  618.67    0.07 (Most Secure)
 *
 * It is not necessary to apply PAD checks on every image delivered by the 
 * sensor driver. Precise Biometrics recommends that the image liveness check
 * is applied after the fingerprint image has resulted in a succesful match as
 * displayed in the code snippet below. This reduces overall system latency and 
 * minimizes the number of opportunities that a finger risk being falesly 
 * classified as a live or a spoof imprint. 
 *   
 *    pb_algorithm_verify_image_pad(algo, tmpl, 1, ver_image, PB_FAR_50K,
 *                                  acme_pad_model,
 *                                  &decision,
 *                                  0, 0, 0, 0,
 *                                  &liveness_score);
 *    if(decision == TRUE && 
 *       liveness_score < pb_pad_get_liveness_threshold(acme_pad_model, PB_FRR_2)){
 *          decision = 0; // reset match flag since a spoof finger was used
 *    }
 *    return decision;
 */


/**
 * A PAD object represents a Presentation Attack Detector model trained for a 
 * specific fingerprint sensor. 
 */
typedef struct pb_pad_st pb_pad_t;

/** Default PAD score value */
#define PB_PAD_SCORE_UNDEFINED    -1
#define PB_PAD_SCORE_MIN          (0)
#define PB_PAD_SCORE_MAX          (1000)

/**
 * Retains the object, which means that the reference counter for the object
 * will increase by 1. The caller must make sure that _delete is being called
 * when the object is not needed anymore. Retaining a null pointer has
 * no effect. */
pb_pad_t*
pb_pad_retain(pb_pad_t* pad);

/**
 * Decreases the reference counter for the object by 1. If the reference
 * counter reaches 0 then the object will also be deleted.
 * Deleting a null pointer has no effect. */
void
pb_pad_delete(pb_pad_t* pad);

/**
 * Get a PAD score for a fingerprint image from the PAD object.  
 * Note that the image must be captured with a fingerprint sensor
 * for which the given model has been trained. 
 *
 * @param[in] pad PAD object used for score calculation.
 * @param[in] image the fingerprint image to calculate PAD score for.
 * @param[out] liveness_score a normalized liveness score between 0 (spoof) and 1000 (live).
 *
 * @return PB_RC_OK if successful.
 */
pb_rc_t
pb_pad_get_score(pb_pad_t* pad,
                 const pb_image_t* image,
                 int32_t* liveness_score);

/**
 * Gets a PAD decision for a set FRR level from the PAD object.
 * Note that the image must be captured with a fingerprint sensor
 * for which the given model has been trained.
 * Note that the FAR value at a specific FRR is heavily dependent on the 
 * training of the PAD model. Check the comments in the model header files
 * for details on the model efficiency and reliability at the different 
 * FRR levels. 
 *
 * @param[in] pad is the PAD object used for decision calculation.
 * @param[in] image is the fingerprint image to calculate the PAD decision for.
 * @param[in] false_reject_rate is the requested false reject rate for the decision .
 * @param[out] decision is a decision where 1 equals live and 0 a spoof image. 
 *
 * @return PB_RC_OK if successful.
 */
pb_rc_t
pb_pad_get_decision(pb_pad_t* pad,
                    const pb_image_t* image,
                    pb_frr_t false_reject_rate,
                    int* decision);

/**
 * Gets the liveness threshold score for pre-defined false reject rate from 
 * the PAD object.
 * The score threshold values are also listed as comments in the header files 
 * of the selected PAD model. 
 * 
 * @param[in] pad PAD object to retrieve liveness score threshold from.
 * @param[in] false_reject_rate pre-defined FRR value
 *
 * @return the PAD object liveness score threshold value. Will return  
 *         PB_PAD_SCORE_UNDEFINED if the provided model doesn't support the 
 *         requested FRR. 
 */
int32_t
pb_pad_get_liveness_threshold(pb_pad_t* pad,
                              pb_frr_t false_reject_rate);

#ifdef __cplusplus
}
#endif

#endif /* PB_PAD_H */
